// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant Organization
model Organization {
  id               String   @id @default(uuid())
  slug             String   @unique
  name             String
  domain           String?
  domainVerified   Boolean  @default(false)
  subscriptionTier String   @default("free")
  settings         Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  events        Event[]
  users         User[]
  registrations Registration[]
  payments      Payment[]

  @@map("organizations")
}

// Events
model Event {
  id                 String    @id @default(uuid())
  orgId              String    @map("org_id")
  slug               String
  nameKo             String    @map("name_ko")
  nameEn             String    @map("name_en")
  nameEs             String?   @map("name_es")
  descriptionKo      String?   @map("description_ko") @db.Text
  descriptionEn      String?   @map("description_en") @db.Text
  descriptionEs      String?   @map("description_es") @db.Text
  startDate          DateTime  @map("start_date")
  endDate            DateTime  @map("end_date")
  registrationStart  DateTime? @map("registration_start")
  registrationEnd    DateTime? @map("registration_end")
  maxParticipants    Int?      @map("max_participants")
  location           String?
  status             String    @default("draft")
  settings           Json      @default("{}")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  organization  Organization   @relation(fields: [orgId], references: [id])
  programs      Program[]
  registrations Registration[]

  @@unique([orgId, slug])
  @@index([orgId])
  @@index([startDate, endDate])
  @@map("events")
}

// Programs (세계선교대회, 선교사수양회, 투어)
model Program {
  id                String    @id @default(uuid())
  eventId           String    @map("event_id")
  code              String
  nameKo            String    @map("name_ko")
  nameEn            String    @map("name_en")
  nameEs            String?   @map("name_es")
  descriptionKo     String?   @map("description_ko")
  descriptionEn     String?   @map("description_en")
  descriptionEs     String?   @map("description_es")
  price             Decimal   @db.Decimal(10, 2)
  earlyBirdPrice    Decimal?  @map("early_bird_price") @db.Decimal(10, 2)
  earlyBirdDeadline DateTime? @map("early_bird_deadline")
  maxCapacity       Int?      @map("max_capacity")
  currentParticipants Int     @default(0) @map("current_participants")
  settings          Json      @default("{}")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  event        Event          @relation(fields: [eventId], references: [id])
  participants Participant[]

  @@unique([eventId, code])
  @@index([eventId])
  @@map("programs")
}

// Users (Admin, Staff, etc.)
model User {
  id           String   @id @default(uuid())
  orgId        String   @map("org_id")
  email        String   @unique
  name         String
  password     String
  role         String   @default("user")
  emailVerified DateTime? @map("email_verified")
  image        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  organization Organization @relation(fields: [orgId], references: [id])
  registrations Registration[]

  @@index([orgId])
  @@index([email])
  @@map("users")
}

// Registration
model Registration {
  id              String   @id @default(uuid())
  orgId           String   @map("org_id")
  eventId         String   @map("event_id")
  userId          String?  @map("user_id")
  registrationType String  @default("individual") @map("registration_type") // individual, group
  groupName       String?  @map("group_name")
  totalAmount     Decimal  @map("total_amount") @db.Decimal(10, 2)
  discountAmount  Decimal  @default(0) @map("discount_amount") @db.Decimal(10, 2)
  status          String   @default("pending") // pending, confirmed, cancelled
  confirmationCode String? @map("confirmation_code")
  notes           String?  @db.Text
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  organization Organization @relation(fields: [orgId], references: [id])
  event        Event        @relation(fields: [eventId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])
  participants Participant[]
  payments     Payment[]

  @@index([orgId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@map("registrations")
}

// Participants
model Participant {
  id               String   @id @default(uuid())
  registrationId   String   @map("registration_id")
  programId        String   @map("program_id")
  nameKo           String   @map("name_ko")
  nameEn           String?  @map("name_en")
  email            String
  phone            String
  birthDate        DateTime? @map("birth_date")
  gender           String?
  nationality      String?
  passportNumber   String?  @map("passport_number")
  dietaryRestrictions String? @map("dietary_restrictions")
  specialNeeds     String?  @map("special_needs")
  emergencyContact Json?    @map("emergency_contact")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  registration Registration @relation(fields: [registrationId], references: [id])
  program      Program      @relation(fields: [programId], references: [id])

  @@index([registrationId])
  @@index([programId])
  @@index([email])
  @@map("participants")
}

// Payments
model Payment {
  id              String   @id @default(uuid())
  orgId           String   @map("org_id")
  registrationId  String   @map("registration_id")
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("KRW")
  paymentMethod   String   @map("payment_method") // card, bank_transfer, virtual_account
  provider        String   // toss, stripe
  providerPaymentId String? @map("provider_payment_id")
  status          String   @default("pending") // pending, processing, completed, failed, refunded
  refundAmount    Decimal? @map("refund_amount") @db.Decimal(10, 2)
  refundReason    String?  @map("refund_reason")
  refundedAt      DateTime? @map("refunded_at")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  organization Organization @relation(fields: [orgId], references: [id])
  registration Registration @relation(fields: [registrationId], references: [id])

  @@index([orgId])
  @@index([registrationId])
  @@index([status])
  @@index([providerPaymentId])
  @@map("payments")
}